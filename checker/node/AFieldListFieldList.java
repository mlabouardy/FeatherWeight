/* This file was generated by SableCC (http://www.sablecc.org/). */

package checker.node;

import java.util.*;
import checker.analysis.*;

@SuppressWarnings("nls")
public final class AFieldListFieldList extends PFieldList
{
    private PFieldName _fieldName_;
    private final LinkedList<PCommaField> _commaField_ = new LinkedList<PCommaField>();

    public AFieldListFieldList()
    {
        // Constructor
    }

    public AFieldListFieldList(
        @SuppressWarnings("hiding") PFieldName _fieldName_,
        @SuppressWarnings("hiding") List<PCommaField> _commaField_)
    {
        // Constructor
        setFieldName(_fieldName_);

        setCommaField(_commaField_);

    }

    @Override
    public Object clone()
    {
        return new AFieldListFieldList(
            cloneNode(this._fieldName_),
            cloneList(this._commaField_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFieldListFieldList(this);
    }

    public PFieldName getFieldName()
    {
        return this._fieldName_;
    }

    public void setFieldName(PFieldName node)
    {
        if(this._fieldName_ != null)
        {
            this._fieldName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fieldName_ = node;
    }

    public LinkedList<PCommaField> getCommaField()
    {
        return this._commaField_;
    }

    public void setCommaField(List<PCommaField> list)
    {
        this._commaField_.clear();
        this._commaField_.addAll(list);
        for(PCommaField e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fieldName_)
            + toString(this._commaField_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fieldName_ == child)
        {
            this._fieldName_ = null;
            return;
        }

        if(this._commaField_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fieldName_ == oldChild)
        {
            setFieldName((PFieldName) newChild);
            return;
        }

        for(ListIterator<PCommaField> i = this._commaField_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCommaField) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
