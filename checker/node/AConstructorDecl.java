/* This file was generated by SableCC (http://www.sablecc.org/). */

package checker.node;

import java.util.*;
import checker.analysis.*;

@SuppressWarnings("nls")
public final class AConstructorDecl extends PConstructorDecl
{
    private TIdentifier _identifier_;
    private TLPar _l1_;
    private PParamDeclList _paramDeclList_;
    private TRPar _r1_;
    private TLBrace _lBrace_;
    private TSuper _super_;
    private TLPar _l2_;
    private PFieldList _fieldList_;
    private TRPar _r2_;
    private TSemicolon _semicolon_;
    private final LinkedList<PThisFieldAssig> _thisFieldAssig_ = new LinkedList<PThisFieldAssig>();
    private TRBrace _rBrace_;

    public AConstructorDecl()
    {
        // Constructor
    }

    public AConstructorDecl(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLPar _l1_,
        @SuppressWarnings("hiding") PParamDeclList _paramDeclList_,
        @SuppressWarnings("hiding") TRPar _r1_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") TSuper _super_,
        @SuppressWarnings("hiding") TLPar _l2_,
        @SuppressWarnings("hiding") PFieldList _fieldList_,
        @SuppressWarnings("hiding") TRPar _r2_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_,
        @SuppressWarnings("hiding") List<PThisFieldAssig> _thisFieldAssig_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setL1(_l1_);

        setParamDeclList(_paramDeclList_);

        setR1(_r1_);

        setLBrace(_lBrace_);

        setSuper(_super_);

        setL2(_l2_);

        setFieldList(_fieldList_);

        setR2(_r2_);

        setSemicolon(_semicolon_);

        setThisFieldAssig(_thisFieldAssig_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new AConstructorDecl(
            cloneNode(this._identifier_),
            cloneNode(this._l1_),
            cloneNode(this._paramDeclList_),
            cloneNode(this._r1_),
            cloneNode(this._lBrace_),
            cloneNode(this._super_),
            cloneNode(this._l2_),
            cloneNode(this._fieldList_),
            cloneNode(this._r2_),
            cloneNode(this._semicolon_),
            cloneList(this._thisFieldAssig_),
            cloneNode(this._rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstructorDecl(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLPar getL1()
    {
        return this._l1_;
    }

    public void setL1(TLPar node)
    {
        if(this._l1_ != null)
        {
            this._l1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l1_ = node;
    }

    public PParamDeclList getParamDeclList()
    {
        return this._paramDeclList_;
    }

    public void setParamDeclList(PParamDeclList node)
    {
        if(this._paramDeclList_ != null)
        {
            this._paramDeclList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramDeclList_ = node;
    }

    public TRPar getR1()
    {
        return this._r1_;
    }

    public void setR1(TRPar node)
    {
        if(this._r1_ != null)
        {
            this._r1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._r1_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public TSuper getSuper()
    {
        return this._super_;
    }

    public void setSuper(TSuper node)
    {
        if(this._super_ != null)
        {
            this._super_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._super_ = node;
    }

    public TLPar getL2()
    {
        return this._l2_;
    }

    public void setL2(TLPar node)
    {
        if(this._l2_ != null)
        {
            this._l2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l2_ = node;
    }

    public PFieldList getFieldList()
    {
        return this._fieldList_;
    }

    public void setFieldList(PFieldList node)
    {
        if(this._fieldList_ != null)
        {
            this._fieldList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fieldList_ = node;
    }

    public TRPar getR2()
    {
        return this._r2_;
    }

    public void setR2(TRPar node)
    {
        if(this._r2_ != null)
        {
            this._r2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._r2_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    public LinkedList<PThisFieldAssig> getThisFieldAssig()
    {
        return this._thisFieldAssig_;
    }

    public void setThisFieldAssig(List<PThisFieldAssig> list)
    {
        this._thisFieldAssig_.clear();
        this._thisFieldAssig_.addAll(list);
        for(PThisFieldAssig e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._l1_)
            + toString(this._paramDeclList_)
            + toString(this._r1_)
            + toString(this._lBrace_)
            + toString(this._super_)
            + toString(this._l2_)
            + toString(this._fieldList_)
            + toString(this._r2_)
            + toString(this._semicolon_)
            + toString(this._thisFieldAssig_)
            + toString(this._rBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._l1_ == child)
        {
            this._l1_ = null;
            return;
        }

        if(this._paramDeclList_ == child)
        {
            this._paramDeclList_ = null;
            return;
        }

        if(this._r1_ == child)
        {
            this._r1_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._super_ == child)
        {
            this._super_ = null;
            return;
        }

        if(this._l2_ == child)
        {
            this._l2_ = null;
            return;
        }

        if(this._fieldList_ == child)
        {
            this._fieldList_ = null;
            return;
        }

        if(this._r2_ == child)
        {
            this._r2_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        if(this._thisFieldAssig_.remove(child))
        {
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._l1_ == oldChild)
        {
            setL1((TLPar) newChild);
            return;
        }

        if(this._paramDeclList_ == oldChild)
        {
            setParamDeclList((PParamDeclList) newChild);
            return;
        }

        if(this._r1_ == oldChild)
        {
            setR1((TRPar) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._super_ == oldChild)
        {
            setSuper((TSuper) newChild);
            return;
        }

        if(this._l2_ == oldChild)
        {
            setL2((TLPar) newChild);
            return;
        }

        if(this._fieldList_ == oldChild)
        {
            setFieldList((PFieldList) newChild);
            return;
        }

        if(this._r2_ == oldChild)
        {
            setR2((TRPar) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        for(ListIterator<PThisFieldAssig> i = this._thisFieldAssig_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PThisFieldAssig) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
