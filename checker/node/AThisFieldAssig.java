/* This file was generated by SableCC (http://www.sablecc.org/). */

package checker.node;

import checker.analysis.*;

@SuppressWarnings("nls")
public final class AThisFieldAssig extends PThisFieldAssig
{
    private TThis _this_;
    private TPeriod _period_;
    private TIdentifier _leftField_;
    private TEq _eq_;
    private TIdentifier _rightField_;
    private TSemicolon _semicolon_;

    public AThisFieldAssig()
    {
        // Constructor
    }

    public AThisFieldAssig(
        @SuppressWarnings("hiding") TThis _this_,
        @SuppressWarnings("hiding") TPeriod _period_,
        @SuppressWarnings("hiding") TIdentifier _leftField_,
        @SuppressWarnings("hiding") TEq _eq_,
        @SuppressWarnings("hiding") TIdentifier _rightField_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setThis(_this_);

        setPeriod(_period_);

        setLeftField(_leftField_);

        setEq(_eq_);

        setRightField(_rightField_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AThisFieldAssig(
            cloneNode(this._this_),
            cloneNode(this._period_),
            cloneNode(this._leftField_),
            cloneNode(this._eq_),
            cloneNode(this._rightField_),
            cloneNode(this._semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAThisFieldAssig(this);
    }

    public TThis getThis()
    {
        return this._this_;
    }

    public void setThis(TThis node)
    {
        if(this._this_ != null)
        {
            this._this_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._this_ = node;
    }

    public TPeriod getPeriod()
    {
        return this._period_;
    }

    public void setPeriod(TPeriod node)
    {
        if(this._period_ != null)
        {
            this._period_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._period_ = node;
    }

    public TIdentifier getLeftField()
    {
        return this._leftField_;
    }

    public void setLeftField(TIdentifier node)
    {
        if(this._leftField_ != null)
        {
            this._leftField_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftField_ = node;
    }

    public TEq getEq()
    {
        return this._eq_;
    }

    public void setEq(TEq node)
    {
        if(this._eq_ != null)
        {
            this._eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eq_ = node;
    }

    public TIdentifier getRightField()
    {
        return this._rightField_;
    }

    public void setRightField(TIdentifier node)
    {
        if(this._rightField_ != null)
        {
            this._rightField_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightField_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._this_)
            + toString(this._period_)
            + toString(this._leftField_)
            + toString(this._eq_)
            + toString(this._rightField_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._this_ == child)
        {
            this._this_ = null;
            return;
        }

        if(this._period_ == child)
        {
            this._period_ = null;
            return;
        }

        if(this._leftField_ == child)
        {
            this._leftField_ = null;
            return;
        }

        if(this._eq_ == child)
        {
            this._eq_ = null;
            return;
        }

        if(this._rightField_ == child)
        {
            this._rightField_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._this_ == oldChild)
        {
            setThis((TThis) newChild);
            return;
        }

        if(this._period_ == oldChild)
        {
            setPeriod((TPeriod) newChild);
            return;
        }

        if(this._leftField_ == oldChild)
        {
            setLeftField((TIdentifier) newChild);
            return;
        }

        if(this._eq_ == oldChild)
        {
            setEq((TEq) newChild);
            return;
        }

        if(this._rightField_ == oldChild)
        {
            setRightField((TIdentifier) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
