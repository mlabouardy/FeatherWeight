/* This file was generated by SableCC (http://www.sablecc.org/). */

package checker.node;

import checker.analysis.*;

@SuppressWarnings("nls")
public final class AMethodCallTerm extends PTerm
{
    private PNonLeftRecTerm _nonLeftRecTerm_;
    private TPeriod _period_;
    private TIdentifier _identifier_;
    private TLPar _lPar_;
    private PTermList _termList_;
    private TRPar _rPar_;

    public AMethodCallTerm()
    {
        // Constructor
    }

    public AMethodCallTerm(
        @SuppressWarnings("hiding") PNonLeftRecTerm _nonLeftRecTerm_,
        @SuppressWarnings("hiding") TPeriod _period_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PTermList _termList_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setNonLeftRecTerm(_nonLeftRecTerm_);

        setPeriod(_period_);

        setIdentifier(_identifier_);

        setLPar(_lPar_);

        setTermList(_termList_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AMethodCallTerm(
            cloneNode(this._nonLeftRecTerm_),
            cloneNode(this._period_),
            cloneNode(this._identifier_),
            cloneNode(this._lPar_),
            cloneNode(this._termList_),
            cloneNode(this._rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodCallTerm(this);
    }

    public PNonLeftRecTerm getNonLeftRecTerm()
    {
        return this._nonLeftRecTerm_;
    }

    public void setNonLeftRecTerm(PNonLeftRecTerm node)
    {
        if(this._nonLeftRecTerm_ != null)
        {
            this._nonLeftRecTerm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nonLeftRecTerm_ = node;
    }

    public TPeriod getPeriod()
    {
        return this._period_;
    }

    public void setPeriod(TPeriod node)
    {
        if(this._period_ != null)
        {
            this._period_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._period_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PTermList getTermList()
    {
        return this._termList_;
    }

    public void setTermList(PTermList node)
    {
        if(this._termList_ != null)
        {
            this._termList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nonLeftRecTerm_)
            + toString(this._period_)
            + toString(this._identifier_)
            + toString(this._lPar_)
            + toString(this._termList_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nonLeftRecTerm_ == child)
        {
            this._nonLeftRecTerm_ = null;
            return;
        }

        if(this._period_ == child)
        {
            this._period_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._termList_ == child)
        {
            this._termList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nonLeftRecTerm_ == oldChild)
        {
            setNonLeftRecTerm((PNonLeftRecTerm) newChild);
            return;
        }

        if(this._period_ == oldChild)
        {
            setPeriod((TPeriod) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._termList_ == oldChild)
        {
            setTermList((PTermList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
