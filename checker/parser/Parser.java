/* This file was generated by SableCC (http://www.sablecc.org/). */

package checker.parser;

import checker.lexer.*;
import checker.node.*;
import checker.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator<State> stack = new LinkedList<State>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprog1Prog */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAprog2Prog */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAclassdecl1ClassDecl */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAclassdecl2ClassDecl */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AAclassdecl3ClassDecl */
		    {
			ArrayList list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce AAclassdecl4ClassDecl */
		    {
			ArrayList list = new5();
			push(goTo(1), list, false);
		    }
		    break;
                    case 6: /* reduce AFieldDecl */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce AAconstructordecl1ConstructorDecl */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AAconstructordecl2ConstructorDecl */
		    {
			ArrayList list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce AMethodDecl */
		    {
			ArrayList list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce AAparamargsparamdecllist1ParamDeclList */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AAparamargsparamdecllist2ParamDeclList */
		    {
			ArrayList list = new11();
			push(goTo(5), list, false);
		    }
		    break;
                    case 12: /* reduce AEmptyParamDeclList */
		    {
			ArrayList list = new12();
			push(goTo(5), list, false);
		    }
		    break;
                    case 13: /* reduce AIdentParamArg */
		    {
			ArrayList list = new13();
			push(goTo(6), list, false);
		    }
		    break;
                    case 14: /* reduce AThisParamArg */
		    {
			ArrayList list = new14();
			push(goTo(6), list, false);
		    }
		    break;
                    case 15: /* reduce ACommaParamArgList */
		    {
			ArrayList list = new15();
			push(goTo(7), list, false);
		    }
		    break;
                    case 16: /* reduce AAfieldlistfieldlist1FieldList */
		    {
			ArrayList list = new16();
			push(goTo(8), list, false);
		    }
		    break;
                    case 17: /* reduce AAfieldlistfieldlist2FieldList */
		    {
			ArrayList list = new17();
			push(goTo(8), list, false);
		    }
		    break;
                    case 18: /* reduce AEmptyFieldList */
		    {
			ArrayList list = new18();
			push(goTo(8), list, false);
		    }
		    break;
                    case 19: /* reduce AFieldName */
		    {
			ArrayList list = new19();
			push(goTo(9), list, false);
		    }
		    break;
                    case 20: /* reduce ACommaField */
		    {
			ArrayList list = new20();
			push(goTo(10), list, false);
		    }
		    break;
                    case 21: /* reduce AThisFieldAssig */
		    {
			ArrayList list = new21();
			push(goTo(11), list, false);
		    }
		    break;
                    case 22: /* reduce ANonLeftRecTermTerm */
		    {
			ArrayList list = new22();
			push(goTo(12), list, false);
		    }
		    break;
                    case 23: /* reduce AFieldAccessTerm */
		    {
			ArrayList list = new23();
			push(goTo(12), list, false);
		    }
		    break;
                    case 24: /* reduce AMethodCallTerm */
		    {
			ArrayList list = new24();
			push(goTo(12), list, false);
		    }
		    break;
                    case 25: /* reduce ACastTerm */
		    {
			ArrayList list = new25();
			push(goTo(12), list, false);
		    }
		    break;
                    case 26: /* reduce AVariableNonLeftRecTerm */
		    {
			ArrayList list = new26();
			push(goTo(13), list, false);
		    }
		    break;
                    case 27: /* reduce AThisNonLeftRecTerm */
		    {
			ArrayList list = new27();
			push(goTo(13), list, false);
		    }
		    break;
                    case 28: /* reduce AObjectCreationNonLeftRecTerm */
		    {
			ArrayList list = new28();
			push(goTo(13), list, false);
		    }
		    break;
                    case 29: /* reduce ABracketNonLeftRecTerm */
		    {
			ArrayList list = new29();
			push(goTo(13), list, false);
		    }
		    break;
                    case 30: /* reduce AAtermlisttermlist1TermList */
		    {
			ArrayList list = new30();
			push(goTo(14), list, false);
		    }
		    break;
                    case 31: /* reduce AAtermlisttermlist2TermList */
		    {
			ArrayList list = new31();
			push(goTo(14), list, false);
		    }
		    break;
                    case 32: /* reduce AEmptyTermList */
		    {
			ArrayList list = new32();
			push(goTo(14), list, false);
		    }
		    break;
                    case 33: /* reduce ACommaTerm */
		    {
			ArrayList list = new33();
			push(goTo(15), list, false);
		    }
		    break;
                    case 34: /* reduce ATerminal$ClassDecl */
		    {
			ArrayList list = new34();
			push(goTo(16), list, true);
		    }
		    break;
                    case 35: /* reduce ANonTerminal$ClassDecl */
		    {
			ArrayList list = new35();
			push(goTo(16), list, true);
		    }
		    break;
                    case 36: /* reduce ATerminal$FieldDecl */
		    {
			ArrayList list = new36();
			push(goTo(17), list, true);
		    }
		    break;
                    case 37: /* reduce ANonTerminal$FieldDecl */
		    {
			ArrayList list = new37();
			push(goTo(17), list, true);
		    }
		    break;
                    case 38: /* reduce ATerminal$MethodDecl */
		    {
			ArrayList list = new38();
			push(goTo(18), list, true);
		    }
		    break;
                    case 39: /* reduce ANonTerminal$MethodDecl */
		    {
			ArrayList list = new39();
			push(goTo(18), list, true);
		    }
		    break;
                    case 40: /* reduce ATerminal$ThisFieldAssig */
		    {
			ArrayList list = new40();
			push(goTo(19), list, true);
		    }
		    break;
                    case 41: /* reduce ANonTerminal$ThisFieldAssig */
		    {
			ArrayList list = new41();
			push(goTo(19), list, true);
		    }
		    break;
                    case 42: /* reduce ATerminal$CommaParamArgList */
		    {
			ArrayList list = new42();
			push(goTo(20), list, true);
		    }
		    break;
                    case 43: /* reduce ANonTerminal$CommaParamArgList */
		    {
			ArrayList list = new43();
			push(goTo(20), list, true);
		    }
		    break;
                    case 44: /* reduce ATerminal$CommaField */
		    {
			ArrayList list = new44();
			push(goTo(21), list, true);
		    }
		    break;
                    case 45: /* reduce ANonTerminal$CommaField */
		    {
			ArrayList list = new45();
			push(goTo(21), list, true);
		    }
		    break;
                    case 46: /* reduce ATerminal$CommaTerm */
		    {
			ArrayList list = new46();
			push(goTo(22), list, true);
		    }
		    break;
                    case 47: /* reduce ANonTerminal$CommaTerm */
		    {
			ArrayList list = new47();
			push(goTo(22), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprog1Prog */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PProg pprogNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pprogNode1 = new AProg(listNode2);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprog2Prog */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogNode1 = new AProg(listNode3);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAclassdecl1ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TTclass ttclassNode2;
        TIdentifier tidentifierNode3;
        TExtends textendsNode4;
        TIdentifier tidentifierNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode7 = new LinkedList();
        PConstructorDecl pconstructordeclNode8;
        LinkedList listNode9 = new LinkedList();
        TRBrace trbraceNode10;
        ttclassNode2 = (TTclass)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pconstructordeclNode8 = (PConstructorDecl)nodeArrayList6.get(0);
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        pclassdeclNode1 = new AClassDecl(ttclassNode2, tidentifierNode3, textendsNode4, tidentifierNode5, tlbraceNode6, listNode7, pconstructordeclNode8, listNode9, trbraceNode10);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAclassdecl2ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TTclass ttclassNode2;
        TIdentifier tidentifierNode3;
        TExtends textendsNode4;
        TIdentifier tidentifierNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode8 = new LinkedList();
        PConstructorDecl pconstructordeclNode9;
        LinkedList listNode10 = new LinkedList();
        TRBrace trbraceNode11;
        ttclassNode2 = (TTclass)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pconstructordeclNode9 = (PConstructorDecl)nodeArrayList7.get(0);
        {
            // Block
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pclassdeclNode1 = new AClassDecl(ttclassNode2, tidentifierNode3, textendsNode4, tidentifierNode5, tlbraceNode6, listNode8, pconstructordeclNode9, listNode10, trbraceNode11);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAclassdecl3ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TTclass ttclassNode2;
        TIdentifier tidentifierNode3;
        TExtends textendsNode4;
        TIdentifier tidentifierNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode7 = new LinkedList();
        PConstructorDecl pconstructordeclNode8;
        LinkedList listNode10 = new LinkedList();
        TRBrace trbraceNode11;
        ttclassNode2 = (TTclass)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        pconstructordeclNode8 = (PConstructorDecl)nodeArrayList6.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        pclassdeclNode1 = new AClassDecl(ttclassNode2, tidentifierNode3, textendsNode4, tidentifierNode5, tlbraceNode6, listNode7, pconstructordeclNode8, listNode10, trbraceNode11);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAclassdecl4ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TTclass ttclassNode2;
        TIdentifier tidentifierNode3;
        TExtends textendsNode4;
        TIdentifier tidentifierNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode8 = new LinkedList();
        PConstructorDecl pconstructordeclNode9;
        LinkedList listNode11 = new LinkedList();
        TRBrace trbraceNode12;
        ttclassNode2 = (TTclass)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pconstructordeclNode9 = (PConstructorDecl)nodeArrayList7.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList8.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        trbraceNode12 = (TRBrace)nodeArrayList9.get(0);

        pclassdeclNode1 = new AClassDecl(ttclassNode2, tidentifierNode3, textendsNode4, tidentifierNode5, tlbraceNode6, listNode8, pconstructordeclNode9, listNode11, trbraceNode12);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AFieldDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldDecl pfielddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pfielddeclNode1 = new AFieldDecl(tidentifierNode2, tidentifierNode3, tsemicolonNode4);
        }
	nodeList.add(pfielddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAconstructordecl1ConstructorDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstructorDecl pconstructordeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PParamDeclList pparamdecllistNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        TSuper tsuperNode7;
        TLPar tlparNode8;
        PFieldList pfieldlistNode9;
        TRPar trparNode10;
        TSemicolon tsemicolonNode11;
        LinkedList listNode12 = new LinkedList();
        TRBrace trbraceNode13;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pparamdecllistNode4 = (PParamDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        tsuperNode7 = (TSuper)nodeArrayList6.get(0);
        tlparNode8 = (TLPar)nodeArrayList7.get(0);
        pfieldlistNode9 = (PFieldList)nodeArrayList8.get(0);
        trparNode10 = (TRPar)nodeArrayList9.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList10.get(0);
        {
            // Block
        }
        trbraceNode13 = (TRBrace)nodeArrayList11.get(0);

        pconstructordeclNode1 = new AConstructorDecl(tidentifierNode2, tlparNode3, pparamdecllistNode4, trparNode5, tlbraceNode6, tsuperNode7, tlparNode8, pfieldlistNode9, trparNode10, tsemicolonNode11, listNode12, trbraceNode13);
        }
	nodeList.add(pconstructordeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAconstructordecl2ConstructorDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstructorDecl pconstructordeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PParamDeclList pparamdecllistNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        TSuper tsuperNode7;
        TLPar tlparNode8;
        PFieldList pfieldlistNode9;
        TRPar trparNode10;
        TSemicolon tsemicolonNode11;
        LinkedList listNode13 = new LinkedList();
        TRBrace trbraceNode14;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pparamdecllistNode4 = (PParamDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        tsuperNode7 = (TSuper)nodeArrayList6.get(0);
        tlparNode8 = (TLPar)nodeArrayList7.get(0);
        pfieldlistNode9 = (PFieldList)nodeArrayList8.get(0);
        trparNode10 = (TRPar)nodeArrayList9.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList10.get(0);
        {
            // Block
        LinkedList listNode12 = new LinkedList();
        listNode12 = (LinkedList)nodeArrayList11.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        trbraceNode14 = (TRBrace)nodeArrayList12.get(0);

        pconstructordeclNode1 = new AConstructorDecl(tidentifierNode2, tlparNode3, pparamdecllistNode4, trparNode5, tlbraceNode6, tsuperNode7, tlparNode8, pfieldlistNode9, trparNode10, tsemicolonNode11, listNode13, trbraceNode14);
        }
	nodeList.add(pconstructordeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AMethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PParamDeclList pparamdecllistNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        TReturn treturnNode8;
        PTerm ptermNode9;
        TSemicolon tsemicolonNode10;
        TRBrace trbraceNode11;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparamdecllistNode5 = (PParamDeclList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        treturnNode8 = (TReturn)nodeArrayList7.get(0);
        ptermNode9 = (PTerm)nodeArrayList8.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList9.get(0);
        trbraceNode11 = (TRBrace)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, tidentifierNode3, tlparNode4, pparamdecllistNode5, trparNode6, tlbraceNode7, treturnNode8, ptermNode9, tsemicolonNode10, trbraceNode11);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAparamargsparamdecllist1ParamDeclList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDeclList pparamdecllistNode1;
        {
            // Block
        PParamArg pparamargNode2;
        LinkedList listNode3 = new LinkedList();
        pparamargNode2 = (PParamArg)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamdecllistNode1 = new AParamArgsParamDeclList(pparamargNode2, listNode3);
        }
	nodeList.add(pparamdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAparamargsparamdecllist2ParamDeclList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDeclList pparamdecllistNode1;
        {
            // Block
        PParamArg pparamargNode2;
        LinkedList listNode4 = new LinkedList();
        pparamargNode2 = (PParamArg)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamdecllistNode1 = new AParamArgsParamDeclList(pparamargNode2, listNode4);
        }
	nodeList.add(pparamdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AEmptyParamDeclList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PParamDeclList pparamdecllistNode1;
        {
            // Block

        pparamdecllistNode1 = new AEmptyParamDeclList();
        }
	nodeList.add(pparamdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AIdentParamArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamArg pparamargNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparamargNode1 = new AIdentParamArg(tidentifierNode2, tidentifierNode3);
        }
	nodeList.add(pparamargNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AThisParamArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamArg pparamargNode1;
        {
            // Block
        TThis tthisNode2;
        TIdentifier tidentifierNode3;
        tthisNode2 = (TThis)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparamargNode1 = new AThisParamArg(tthisNode2, tidentifierNode3);
        }
	nodeList.add(pparamargNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ACommaParamArgList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommaParamArgList pcommaparamarglistNode1;
        {
            // Block
        TComma tcommaNode2;
        PParamArg pparamargNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparamargNode3 = (PParamArg)nodeArrayList2.get(0);

        pcommaparamarglistNode1 = new ACommaParamArgList(tcommaNode2, pparamargNode3);
        }
	nodeList.add(pcommaparamarglistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAfieldlistfieldlist1FieldList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldList pfieldlistNode1;
        {
            // Block
        PFieldName pfieldnameNode2;
        LinkedList listNode3 = new LinkedList();
        pfieldnameNode2 = (PFieldName)nodeArrayList1.get(0);
        {
            // Block
        }

        pfieldlistNode1 = new AFieldListFieldList(pfieldnameNode2, listNode3);
        }
	nodeList.add(pfieldlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAfieldlistfieldlist2FieldList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldList pfieldlistNode1;
        {
            // Block
        PFieldName pfieldnameNode2;
        LinkedList listNode4 = new LinkedList();
        pfieldnameNode2 = (PFieldName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfieldlistNode1 = new AFieldListFieldList(pfieldnameNode2, listNode4);
        }
	nodeList.add(pfieldlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AEmptyFieldList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PFieldList pfieldlistNode1;
        {
            // Block

        pfieldlistNode1 = new AEmptyFieldList();
        }
	nodeList.add(pfieldlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AFieldName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldName pfieldnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfieldnameNode1 = new AFieldName(tidentifierNode2);
        }
	nodeList.add(pfieldnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ACommaField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommaField pcommafieldNode1;
        {
            // Block
        TComma tcommaNode2;
        PFieldName pfieldnameNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pfieldnameNode3 = (PFieldName)nodeArrayList2.get(0);

        pcommafieldNode1 = new ACommaField(tcommaNode2, pfieldnameNode3);
        }
	nodeList.add(pcommafieldNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AThisFieldAssig */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PThisFieldAssig pthisfieldassigNode1;
        {
            // Block
        TThis tthisNode2;
        TPeriod tperiodNode3;
        TIdentifier tidentifierNode4;
        TEq teqNode5;
        TIdentifier tidentifierNode6;
        TSemicolon tsemicolonNode7;
        tthisNode2 = (TThis)nodeArrayList1.get(0);
        tperiodNode3 = (TPeriod)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        teqNode5 = (TEq)nodeArrayList4.get(0);
        tidentifierNode6 = (TIdentifier)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pthisfieldassigNode1 = new AThisFieldAssig(tthisNode2, tperiodNode3, tidentifierNode4, teqNode5, tidentifierNode6, tsemicolonNode7);
        }
	nodeList.add(pthisfieldassigNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ANonLeftRecTermTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PNonLeftRecTerm pnonleftrectermNode2;
        pnonleftrectermNode2 = (PNonLeftRecTerm)nodeArrayList1.get(0);

        ptermNode1 = new ANonLeftRecTermTerm(pnonleftrectermNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AFieldAccessTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PNonLeftRecTerm pnonleftrectermNode2;
        TPeriod tperiodNode3;
        TIdentifier tidentifierNode4;
        pnonleftrectermNode2 = (PNonLeftRecTerm)nodeArrayList1.get(0);
        tperiodNode3 = (TPeriod)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        ptermNode1 = new AFieldAccessTerm(pnonleftrectermNode2, tperiodNode3, tidentifierNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AMethodCallTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PNonLeftRecTerm pnonleftrectermNode2;
        TPeriod tperiodNode3;
        TIdentifier tidentifierNode4;
        TLPar tlparNode5;
        PTermList ptermlistNode6;
        TRPar trparNode7;
        pnonleftrectermNode2 = (PNonLeftRecTerm)nodeArrayList1.get(0);
        tperiodNode3 = (TPeriod)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        ptermlistNode6 = (PTermList)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        ptermNode1 = new AMethodCallTerm(pnonleftrectermNode2, tperiodNode3, tidentifierNode4, tlparNode5, ptermlistNode6, trparNode7);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ACastTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLSq tlsqNode2;
        TIdentifier tidentifierNode3;
        TRSq trsqNode4;
        PNonLeftRecTerm pnonleftrectermNode5;
        tlsqNode2 = (TLSq)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        trsqNode4 = (TRSq)nodeArrayList3.get(0);
        pnonleftrectermNode5 = (PNonLeftRecTerm)nodeArrayList4.get(0);

        ptermNode1 = new ACastTerm(tlsqNode2, tidentifierNode3, trsqNode4, pnonleftrectermNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AVariableNonLeftRecTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNonLeftRecTerm pnonleftrectermNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pnonleftrectermNode1 = new AVariableNonLeftRecTerm(tidentifierNode2);
        }
	nodeList.add(pnonleftrectermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AThisNonLeftRecTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNonLeftRecTerm pnonleftrectermNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        pnonleftrectermNode1 = new AThisNonLeftRecTerm(tthisNode2);
        }
	nodeList.add(pnonleftrectermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AObjectCreationNonLeftRecTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNonLeftRecTerm pnonleftrectermNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PTermList ptermlistNode5;
        TRPar trparNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        ptermlistNode5 = (PTermList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pnonleftrectermNode1 = new AObjectCreationNonLeftRecTerm(tnewNode2, tidentifierNode3, tlparNode4, ptermlistNode5, trparNode6);
        }
	nodeList.add(pnonleftrectermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ABracketNonLeftRecTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNonLeftRecTerm pnonleftrectermNode1;
        {
            // Block
        TLPar tlparNode2;
        PTerm ptermNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pnonleftrectermNode1 = new ABracketNonLeftRecTerm(tlparNode2, ptermNode3, trparNode4);
        }
	nodeList.add(pnonleftrectermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAtermlisttermlist1TermList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermList ptermlistNode1;
        {
            // Block
        PTerm ptermNode2;
        LinkedList listNode3 = new LinkedList();
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        {
            // Block
        }

        ptermlistNode1 = new ATermListTermList(ptermNode2, listNode3);
        }
	nodeList.add(ptermlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAtermlisttermlist2TermList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermList ptermlistNode1;
        {
            // Block
        PTerm ptermNode2;
        LinkedList listNode4 = new LinkedList();
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptermlistNode1 = new ATermListTermList(ptermNode2, listNode4);
        }
	nodeList.add(ptermlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AEmptyTermList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PTermList ptermlistNode1;
        {
            // Block

        ptermlistNode1 = new AEmptyTermList();
        }
	nodeList.add(ptermlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ACommaTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommaTerm pcommatermNode1;
        {
            // Block
        TComma tcommaNode2;
        PTerm ptermNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        pcommatermNode1 = new ACommaTerm(tcommaNode2, ptermNode3);
        }
	nodeList.add(pcommatermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ATerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ANonTerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PClassDecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ATerminal$FieldDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFieldDecl pfielddeclNode1;
        pfielddeclNode1 = (PFieldDecl)nodeArrayList1.get(0);
	if(pfielddeclNode1 != null)
	{
	  listNode2.add(pfielddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ANonTerminal$FieldDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFieldDecl pfielddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfielddeclNode2 = (PFieldDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfielddeclNode2 != null)
	{
	  listNode3.add(pfielddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ATerminal$ThisFieldAssig */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PThisFieldAssig pthisfieldassigNode1;
        pthisfieldassigNode1 = (PThisFieldAssig)nodeArrayList1.get(0);
	if(pthisfieldassigNode1 != null)
	{
	  listNode2.add(pthisfieldassigNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ANonTerminal$ThisFieldAssig */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PThisFieldAssig pthisfieldassigNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pthisfieldassigNode2 = (PThisFieldAssig)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pthisfieldassigNode2 != null)
	{
	  listNode3.add(pthisfieldassigNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ATerminal$CommaParamArgList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PCommaParamArgList pcommaparamarglistNode1;
        pcommaparamarglistNode1 = (PCommaParamArgList)nodeArrayList1.get(0);
	if(pcommaparamarglistNode1 != null)
	{
	  listNode2.add(pcommaparamarglistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ANonTerminal$CommaParamArgList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PCommaParamArgList pcommaparamarglistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaparamarglistNode2 = (PCommaParamArgList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaparamarglistNode2 != null)
	{
	  listNode3.add(pcommaparamarglistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ATerminal$CommaField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PCommaField pcommafieldNode1;
        pcommafieldNode1 = (PCommaField)nodeArrayList1.get(0);
	if(pcommafieldNode1 != null)
	{
	  listNode2.add(pcommafieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANonTerminal$CommaField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PCommaField pcommafieldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommafieldNode2 = (PCommaField)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommafieldNode2 != null)
	{
	  listNode3.add(pcommafieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ATerminal$CommaTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PCommaTerm pcommatermNode1;
        pcommatermNode1 = (PCommaTerm)nodeArrayList1.get(0);
	if(pcommatermNode1 != null)
	{
	  listNode2.add(pcommatermNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ANonTerminal$CommaTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PCommaTerm pcommatermNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommatermNode2 = (PCommaTerm)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommatermNode2 != null)
	{
	  listNode3.add(pcommatermNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {16, SHIFT, 5}, },
			{{-1, ERROR, 2}, {17, ACCEPT, -1}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, ERROR, 5}, {1, SHIFT, 7}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 7}, {16, SHIFT, 8}, },
			{{-1, ERROR, 8}, {6, SHIFT, 9}, },
			{{-1, ERROR, 9}, {16, SHIFT, 10}, },
			{{-1, ERROR, 10}, {10, SHIFT, 14}, {16, SHIFT, 15}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 12}, {7, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 13}, {16, SHIFT, 10}, },
			{{-1, REDUCE, 12}, {3, SHIFT, 22}, {16, SHIFT, 23}, },
			{{-1, ERROR, 15}, {8, SHIFT, 26}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 17}, {16, SHIFT, 27}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 19}, {7, SHIFT, 28}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 21}, {7, SHIFT, 30}, {16, SHIFT, 17}, },
			{{-1, ERROR, 22}, {16, SHIFT, 32}, },
			{{-1, ERROR, 23}, {16, SHIFT, 33}, },
			{{-1, ERROR, 24}, {11, SHIFT, 34}, },
			{{-1, REDUCE, 10}, {9, SHIFT, 35}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 27}, {10, SHIFT, 38}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 31}, {7, SHIFT, 39}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 34}, {6, SHIFT, 40}, },
			{{-1, ERROR, 35}, {3, SHIFT, 22}, {16, SHIFT, 23}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 11}, {9, SHIFT, 35}, },
			{{-1, REDUCE, 12}, {3, SHIFT, 22}, {16, SHIFT, 23}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 40}, {2, SHIFT, 44}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 43}, {11, SHIFT, 45}, },
			{{-1, ERROR, 44}, {10, SHIFT, 46}, },
			{{-1, ERROR, 45}, {6, SHIFT, 47}, },
			{{-1, REDUCE, 18}, {16, SHIFT, 48}, },
			{{-1, ERROR, 47}, {5, SHIFT, 51}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 49}, {11, SHIFT, 52}, },
			{{-1, REDUCE, 16}, {9, SHIFT, 53}, },
			{{-1, ERROR, 51}, {3, SHIFT, 56}, {4, SHIFT, 57}, {10, SHIFT, 58}, {12, SHIFT, 59}, {16, SHIFT, 60}, },
			{{-1, ERROR, 52}, {8, SHIFT, 63}, },
			{{-1, ERROR, 53}, {16, SHIFT, 48}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 17}, {9, SHIFT, 53}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 57}, {16, SHIFT, 66}, },
			{{-1, ERROR, 58}, {3, SHIFT, 56}, {4, SHIFT, 57}, {10, SHIFT, 58}, {12, SHIFT, 59}, {16, SHIFT, 60}, },
			{{-1, ERROR, 59}, {16, SHIFT, 68}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 61}, {8, SHIFT, 69}, },
			{{-1, REDUCE, 22}, {14, SHIFT, 70}, },
			{{-1, ERROR, 63}, {3, SHIFT, 71}, {7, SHIFT, 72}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 66}, {10, SHIFT, 75}, },
			{{-1, ERROR, 67}, {11, SHIFT, 76}, },
			{{-1, ERROR, 68}, {13, SHIFT, 77}, },
			{{-1, ERROR, 69}, {7, SHIFT, 78}, },
			{{-1, ERROR, 70}, {16, SHIFT, 79}, },
			{{-1, ERROR, 71}, {14, SHIFT, 80}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 74}, {3, SHIFT, 71}, {7, SHIFT, 81}, },
			{{-1, REDUCE, 32}, {3, SHIFT, 56}, {4, SHIFT, 57}, {10, SHIFT, 58}, {12, SHIFT, 59}, {16, SHIFT, 60}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 77}, {3, SHIFT, 56}, {4, SHIFT, 57}, {10, SHIFT, 58}, {16, SHIFT, 60}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 23}, {10, SHIFT, 86}, },
			{{-1, ERROR, 80}, {16, SHIFT, 87}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 30}, {9, SHIFT, 88}, },
			{{-1, ERROR, 84}, {11, SHIFT, 91}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 32}, {3, SHIFT, 56}, {4, SHIFT, 57}, {10, SHIFT, 58}, {12, SHIFT, 59}, {16, SHIFT, 60}, },
			{{-1, ERROR, 87}, {15, SHIFT, 93}, },
			{{-1, ERROR, 88}, {3, SHIFT, 56}, {4, SHIFT, 57}, {10, SHIFT, 58}, {12, SHIFT, 59}, {16, SHIFT, 60}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 31}, {9, SHIFT, 88}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 92}, {11, SHIFT, 96}, },
			{{-1, ERROR, 93}, {16, SHIFT, 97}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 97}, {8, SHIFT, 98}, },
			{{-1, REDUCE, 21}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 6}, },
			{{-1, 11}, {13, 20}, },
			{{-1, 12}, {13, 21}, },
			{{-1, 18}, {19, 29}, {31, 29}, },
			{{-1, 24}, {38, 43}, },
			{{-1, 25}, {35, 41}, },
			{{-1, 36}, {37, 42}, },
			{{-1, 49}, },
			{{-1, 50}, {53, 64}, },
			{{-1, 54}, {55, 65}, },
			{{-1, 73}, {74, 82}, },
			{{-1, 83}, {51, 61}, {58, 67}, {88, 94}, },
			{{-1, 62}, {77, 85}, },
			{{-1, 84}, {86, 92}, },
			{{-1, 89}, {90, 95}, },
			{{-1, 4}, },
			{{-1, 13}, },
			{{-1, 19}, {21, 31}, },
			{{-1, 74}, },
			{{-1, 37}, },
			{{-1, 55}, },
			{{-1, 90}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class', EOF",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'extends'",
			"expecting: '{'",
			"expecting: '(', identifier",
			"expecting: '}', identifier",
			"expecting: 'this', ')', identifier",
			"expecting: ';'",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: '('",
			"expecting: 'this', identifier",
			"expecting: 'super'",
			"expecting: ')', identifier",
			"expecting: 'return'",
			"expecting: 'this', 'new', '(', '[', identifier",
			"expecting: ';', ',', ')', '.'",
			"expecting: 'this', '}'",
			"expecting: ']'",
			"expecting: '}'",
			"expecting: '.'",
			"expecting: 'this', 'new', '(', ')', '[', identifier",
			"expecting: 'this', 'new', '(', identifier",
			"expecting: ';', ',', '(', ')'",
			"expecting: ';', ',', ')'",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 0, 0, 3, 0, 1, 4, 1, 5, 1, 6, 1, 7, 8, 0, 1, 6, 6, 1, 6, 1, 1, 9, 10, 1, 11, 0, 6, 0, 6, 10, 10, 4, 12, 10, 10, 7, 0, 13, 10, 10, 9, 11, 4, 14, 15, 10, 9, 10, 16, 8, 1, 10, 10, 17, 1, 16, 1, 17, 8, 17, 18, 10, 10, 11, 9, 19, 20, 1, 21, 6, 18, 18, 22, 17, 23, 6, 24, 1, 6, 18, 10, 9, 25, 22, 26, 16, 10, 10, 17, 9, 1, 10, 10, 25, 8, 18, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
